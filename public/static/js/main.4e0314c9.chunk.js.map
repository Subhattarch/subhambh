{"version":3,"sources":["smallFunctions.ts","UseState.ts","months.ts","calendar.tsx","Event.tsx","CreateEvent.tsx","SummaryOfEvents.tsx","header.tsx","SignIn.tsx","message.tsx","App.tsx","index.tsx"],"names":["getDaysInMonth","month","year","Date","getDate","ArrayInRange","start","range","Array","from","length","x","i","DefaultArray","dfault","Value","array","Default","index","value","UseState","state","vallue","useState","State","setState","StateIsObject","Object","SetStateFnc","useCallback","newState","months","Calendar","dateRange","lastDateRange","dateStartAt","selectedDate","setYear","setMonth","setDate","setFocused","id","type","onChange","e","parseInt","target","className","onClick","indexOf","map","Month","style","color","date","Year","Events","user","Ref","CreateEvent","ShowEvents","allEvents","setAllEvents","Focused","dataName","get","data","Data","setEvents","events","current","useEffect","fail","console","log","position","overflowY","ref","rem","$","css","scrollTop","startTime","event","Index","Event","StartHour","Math","floor","StartMinute","EndHour","endTime","EndMinute","top","minHeight","height","overflow","title","description","number","left","width","borderTop","pointerEvents","toggleCreation","changeEventShowed","setFocus","setMessage","setStartHour","setStartMinute","setEndHour","setEndMinute","AMPMStart","setAMPMStart","AMPMEnd","setAMPMEnd","stopPropagation","onSubmit","preventDefault","form","find","val","EventData","isArray","EventsAtSameStart","eventsAtOneTime","indexOfEventsAtSameStart","text","error","sort","prevEvent","nextEvent","prevEvents","nextEvents","htmlFor","name","required","cols","rows","max","min","SummaryOfEvents","EventShowed","header","setSignIn","setUser","post","SignIn","errorRef","useRef","serverFault","invalidPassRef","haveAcount","setHaveAcount","attr","pattern","setCustomValidity","onInvalid","test","a","checkValidity","password","promise","o","isValid","isValidPassword","Message","message","pRef","p","setTimeout","transform","right","transition","backgroundColor","border","zIndex","padding","borderRadius","fontSize","App","getFullYear","isSigningIn","getMonth","ShowedEvents","setShowedEvents","FocusedEvent","String","EventsRef","isCreatingEvent","getDay","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e0314c9.chunk.js","sourcesContent":["import { defaultArray } from \"./types\";\n\nconst getDaysInMonth = (month: number, year: number): number =>\n    new Date(year, month + 1, 0).getDate();\n\nconst ArrayInRange = (start: number, range: number): Array<number> =>\n    Array.from({ length: range }, (x: never, i: number): number => i + start);\n\nconst isObject = (vallue: unknown): boolean => {\n    return (\n        typeof vallue === \"object\" &&\n        vallue instanceof Object &&\n        !(vallue instanceof Array)\n    );\n};\n\nconst DefaultArray = <type>(\n    dfault: type,\n    Value?: Array<type>\n): defaultArray<type> => {\n    const array: Array<type> = Value ?? [];\n    const Default = dfault;\n    return ((index?: number, value?: type): type | type[] => {\n        if (index == null) return array;\n        array[index] = array[index] ?? Default;\n        if (value != null) {\n            array[index] = value;\n            return array;\n        }\n        return array[index];\n    }) as defaultArray<type>;\n};\n\nexport { getDaysInMonth, ArrayInRange, isObject, DefaultArray };\n","import { useCallback, useState } from \"react\";\nimport { isObject } from \"./smallFunctions\";\nimport { SetState, State, StateAssigner } from \"./types\";\n\nfunction UseState<type>(state: type | (() => type)): State<type> {\n    const [State, setState]: State<Partial<type>> =\n        useState<Partial<type>>(state);\n    const StateIsObject = isObject(State);\n\n    const SetStateFnc = useCallback(\n        (newState: StateAssigner<Partial<type>>): void => {\n            setState((state: Partial<type>): Partial<type> => {\n                return StateIsObject\n                    ? {\n                          ...state,\n                          ...(typeof newState === \"function\"\n                              ? newState(state)\n                              : newState),\n                      }\n                    : typeof newState === \"function\"\n                    ? newState(state)\n                    : newState;\n            });\n        },\n        [setState, StateIsObject]\n    );\n    return [State as type, SetStateFnc as SetState<type>];\n}\n\nexport default UseState;\n","const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n];\n\nexport default months;\n","import React from \"react\";\nimport { ChangeEvent } from \"react\";\nimport { ArrayInRange } from \"./smallFunctions\";\nimport { SetState } from \"./types\";\nimport months from \"./months\";\nimport \"./calendar.css\";\n\ninterface CalendarProps {\n    month: number;\n    dateRange: number;\n    lastDateRange: number;\n    dateStartAt: number;\n    year: number;\n    selectedDate: number;\n    setYear: SetState<number>;\n    setMonth: SetState<number>;\n    setDate: SetState<number>;\n    setFocused: SetState<Array<number>>;\n}\n\nconst Calendar = ({\n    month,\n    dateRange,\n    lastDateRange,\n    dateStartAt,\n    year,\n    selectedDate,\n    setYear,\n    setMonth,\n    setDate,\n    setFocused,\n}: CalendarProps): JSX.Element => {\n    return (\n        <div id='calendar'>\n            <div id='year-month-wraper'>\n                <div id='year-wraper'>\n                    <input\n                        type='number'\n                        id='year'\n                        value={year}\n                        onChange={(e: ChangeEvent<HTMLInputElement>): void => {\n                            setYear(parseInt(e.target.value));\n                        }}\n                    />\n                    <span id='change-year'>\n                        <button\n                            className='increament'\n                            onClick={(): void => {\n                                setYear((year: number): number => ++year);\n                            }}\n                        ></button>\n                        <button\n                            className='decreament'\n                            onClick={(): void => {\n                                setYear((year: number): number => --year);\n                            }}\n                        ></button>\n                    </span>\n                </div>\n                <select\n                    id='month'\n                    onChange={(e: ChangeEvent<HTMLSelectElement>): void => {\n                        setMonth(months.indexOf(e.target.value));\n                    }}\n                    value={months[month]}\n                >\n                    {months.map((Month: string, index: number): JSX.Element => {\n                        return (\n                            <option key={index} value={Month}>\n                                {Month}\n                            </option>\n                        );\n                    })}\n                </select>\n            </div>\n            <div id='calendar-grid'>\n                <span\n                    className='calendar-cell day'\n                    style={{\n                        color: \"orangered\",\n                    }}\n                >\n                    Sun\n                </span>\n                <span className='calendar-cell day'>Mon</span>\n                <span className='calendar-cell day'>Tue</span>\n                <span className='calendar-cell day'>Wed</span>\n                <span className='calendar-cell day'>Thu</span>\n                <span className='calendar-cell day'>Fri</span>\n                <span\n                    className='calendar-cell day'\n                    style={{\n                        color: \"orange\",\n                    }}\n                >\n                    Sat\n                </span>\n                {ArrayInRange(lastDateRange - dateStartAt + 1, dateStartAt).map(\n                    (date: number, index: number): JSX.Element => (\n                        <button\n                            className='calendar-cell not-current'\n                            style={\n                                index % 7 === 0\n                                    ? {\n                                          color: \"orangered\",\n                                      }\n                                    : index % 7 === 6\n                                    ? {\n                                          color: \"orange\",\n                                      }\n                                    : {}\n                            }\n                            onClick={(): void => {\n                                setDate(date);\n                                setMonth((Month: number): number =>\n                                    Month === 0 ? 11 : Month - 1\n                                );\n                                setYear((Year: number): number =>\n                                    month === 0 ? Year - 1 : Year\n                                );\n                                setFocused([-1, -1]);\n                            }}\n                            key={date}\n                        >\n                            {date}\n                        </button>\n                    )\n                )}\n                {[...ArrayInRange(1, dateRange)].map(\n                    (date: number): JSX.Element => (\n                        <button\n                            className={`calendar-cell ${\n                                date === selectedDate ? \"selected\" : \"\"\n                            }`}\n                            onClick={(): void => {\n                                setDate(date);\n                                setFocused([-1, -1]);\n                            }}\n                            style={\n                                (date + dateStartAt - 1) % 7 === 0\n                                    ? {\n                                          color: \"orangered\",\n                                      }\n                                    : (date + dateStartAt) % 7 === 0\n                                    ? {\n                                          color: \"orange\",\n                                      }\n                                    : {}\n                            }\n                            key={date}\n                        >\n                            {date}\n                        </button>\n                    )\n                )}\n                {ArrayInRange(1, 42 - dateStartAt - dateRange).map(\n                    (date: number): JSX.Element => (\n                        <button\n                            className='calendar-cell not-current'\n                            style={\n                                (date + dateRange + dateStartAt - 1) % 7 === 0\n                                    ? {\n                                          color: \"orangered\",\n                                      }\n                                    : (date + dateRange + dateStartAt) % 7 === 0\n                                    ? {\n                                          color: \"orange\",\n                                      }\n                                    : {}\n                            }\n                            onClick={(): void => {\n                                setDate(date);\n                                setMonth((Month: number): number =>\n                                    Month === 11 ? 0 : Month + 1\n                                );\n                                setYear((Year: number): number =>\n                                    month === 11 ? Year + 1 : Year\n                                );\n                                setFocused([-1, -1]);\n                            }}\n                            key={date}\n                        >\n                            {date}\n                        </button>\n                    )\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Calendar;\n","import $, { get } from \"jquery\";\nimport React, { MutableRefObject, useEffect } from \"react\";\nimport { State, Event, defaultArray, AllEvents, SetState } from \"./types\";\nimport UseState from \"./UseState\";\nimport \"./Event.css\";\nimport { ArrayInRange } from \"./smallFunctions\";\n\ninterface EventsProps {\n    year: number;\n    month: number;\n    date: number;\n    user: string;\n    ShowEvents: defaultArray<number>;\n    Ref: MutableRefObject<Event[] | (Event | undefined)[] | null>;\n    CreateEvent(): void;\n    allEvents: AllEvents;\n    setAllEvents: SetState<AllEvents>;\n    setFocused: SetState<Array<number>>;\n    Focused: Array<number>;\n}\n\nconst Events = ({\n    year,\n    month,\n    date,\n    user,\n    Ref,\n    CreateEvent,\n    ShowEvents,\n    allEvents,\n    setAllEvents,\n    setFocused,\n    Focused,\n}: EventsProps): JSX.Element => {\n    const dataName = `${date}-${month}-${year}`;\n    const [events, setEvents]: State<Array<Event | undefined> | null> =\n        UseState<Array<Event | undefined> | null>(\n            ((): Array<Event> => {\n                if (allEvents[dataName] != null) {\n                    return allEvents[dataName];\n                }\n                get(\n                    `./calendar/${user}-${dataName}.json`,\n                    (data: Array<Event>): void => {\n                        const Data: AllEvents = {};\n                        Data[dataName] = data;\n                        setAllEvents(Data);\n                        setEvents(data);\n                    },\n                    \"json\"\n                );\n                return [];\n            })()\n        );\n\n    const current = Ref.current;\n    useEffect((): void => {\n        const Data: AllEvents = {};\n        Data[dataName] = current as Event[];\n        setAllEvents(Data);\n        setEvents(current);\n    }, [Ref, current, dataName, setAllEvents, setEvents]);\n\n    useEffect((): void => {\n        get(\n            `./calendar/${user}-${dataName}.json`,\n            (data: Array<Event>): void => {\n                Ref.current = data;\n                const Data: AllEvents = {};\n                Data[dataName] = data;\n                setAllEvents(Data);\n                setEvents(data);\n            },\n            \"json\"\n        ).fail((): void => {\n            console.log(\"no previous data\");\n            if (\n                allEvents[dataName] != null &&\n                (allEvents[dataName] as Event[])?.length === 0\n            ) {\n                Ref.current = allEvents[dataName];\n                setEvents(allEvents[dataName]);\n                return;\n            }\n        });\n        Ref.current = [];\n        setEvents([]);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dataName, user]);\n\n    if (!Ref.current) Ref.current = events;\n    return (\n        <div id='Events'>\n            {(events?.length || events?.length !== 0) && <h2>Events</h2>}\n            {!events?.length || events?.length === 0 ? (\n                <h1>No Events Today</h1>\n            ) : (\n                <div\n                    className='event-container'\n                    style={{\n                        position: \"relative\",\n                        overflowY: \"auto\",\n                    }}\n                    ref={(ref: HTMLDivElement): void => {\n                        const rem = parseInt($(\"html\").css(\"font-size\"));\n                        if (Focused[0] > -1 && Focused[1] > -1)\n                            $(ref)?.scrollTop(\n                                (events as Event[])?.[Focused[0]]?.[Focused[1]]\n                                    .startTime *\n                                    rem *\n                                    0.3\n                            );\n                    }}\n                >\n                    {events?.map((event, index): JSX.Element => {\n                        const Index = ShowEvents(index);\n\n                        const Event = [...(event as Event)][Index];\n                        const StartHour =\n                            Event?.startTime < 60\n                                ? 0\n                                : Math.floor(Event?.startTime / 60) % 12 || 12;\n                        const StartMinute = Event?.startTime % 60;\n                        const EndHour =\n                            Event?.endTime < 60\n                                ? 0\n                                : Math.floor(Event?.endTime / 60) % 12 || 12;\n                        const EndMinute = Event?.endTime % 60;\n                        return (\n                            <div\n                                key={index}\n                                onClick={(): void => {\n                                    setFocused([index, Index]);\n                                }}\n                                style={{\n                                    position: \"absolute\",\n                                    top: `${Event?.startTime * 0.3}rem`,\n                                    minHeight:\n                                        index === Focused[0] &&\n                                        Index === Focused[1]\n                                            ? `${\n                                                  (Event?.endTime -\n                                                      Event?.startTime) *\n                                                  0.3\n                                              }rem`\n                                            : \"3rem\",\n                                    height:\n                                        index === Focused[0] &&\n                                        Index === Focused[1]\n                                            ? \"auto\"\n                                            : `${\n                                                  (Event?.endTime -\n                                                      Event?.startTime) *\n                                                  0.3\n                                              }rem`,\n                                    overflow: \"hidden\",\n                                }}\n                                className={`event ${\n                                    index === Focused[0] && Index === Focused[1]\n                                        ? \"focus\"\n                                        : \"\"\n                                }`}\n                            >\n                                <p className='time'>\n                                    From {StartHour}:{StartMinute}{\" \"}\n                                    {Event?.startTime <= 12 * 60 ? \"am\" : \"pm\"}{\" \"}\n                                    to {EndHour}:{EndMinute}{\" \"}\n                                    {Event?.endTime <= 12 * 60 ? \"am\" : \"pm\"}\n                                </p>\n                                <h3>{Event?.title}</h3>\n                                <p>{Event?.description}</p>\n                            </div>\n                        );\n                    })}\n                    {ArrayInRange(0, 49).map((number: number): JSX.Element => {\n                        if (number % 2 === 0)\n                            return (\n                                <p\n                                    key={number}\n                                    style={{\n                                        position: \"absolute\",\n                                        top: `${number * 9}rem`,\n                                        left: \"0\",\n                                        width: \"100%\",\n                                        borderTop: \"0.05em solid\",\n                                        pointerEvents: \"none\",\n                                    }}\n                                >\n                                    {number === 0 ? 0 : (number / 2) % 12 || 12}{\" \"}\n                                    {number / 2 > 12 ? \"pm\" : \"am\"}\n                                </p>\n                            );\n\n                        return (\n                            <p\n                                key={number}\n                                style={{\n                                    position: \"absolute\",\n                                    top: `${number * 9}rem`,\n                                    width: \"100%\",\n                                    borderTop: \"0.01em solid\",\n                                    left: \"0\",\n                                    pointerEvents: \"none\",\n                                }}\n                            >\n                                30\n                            </p>\n                        );\n                    })}\n                </div>\n            )}\n            <button onClick={CreateEvent}>Create new Event</button>\n        </div>\n    );\n};\n\nexport default Events;\n","import $ from \"jquery\";\nimport React, {\n    ChangeEvent,\n    FormEvent,\n    MouseEvent,\n    MutableRefObject,\n    SetStateAction,\n} from \"react\";\nimport { DefaultArray } from \"./smallFunctions\";\nimport { defaultArray, Event, EventBase, SetState, State } from \"./types\";\nimport useState from \"./UseState\";\nimport \"./CreateEvent.css\";\n\ninterface CreateEventProps {\n    Ref: MutableRefObject<Event[] | null>;\n    changeEventShowed: SetState<defaultArray<number>>;\n    setFocus: SetState<Array<number>>;\n    setMessage: SetState<{\n        text: string;\n        error?: boolean;\n    }>;\n    toggleCreation: (value: SetStateAction<boolean>) => void;\n}\n\nconst CreateEvent = ({\n    Ref,\n    toggleCreation,\n    changeEventShowed,\n    setFocus,\n    setMessage,\n}: CreateEventProps): JSX.Element => {\n    const [StartHour, setStartHour]: State<number> = useState<number>(0);\n    const [StartMinute, setStartMinute]: State<number> = useState<number>(0);\n    const [EndHour, setEndHour]: State<number> = useState<number>(0);\n    const [EndMinute, setEndMinute]: State<number> = useState<number>(0);\n    const [AMPMStart, setAMPMStart]: State<string> = useState<string>(\"am\");\n    const [AMPMEnd, setAMPMEnd]: State<string> = useState<string>(\"am\");\n\n    return (\n        <div\n            id='create-event'\n            onClick={(): void => {\n                toggleCreation(false);\n            }}\n        >\n            <form\n                onClick={(e: MouseEvent<HTMLFormElement>) => {\n                    e.stopPropagation();\n                }}\n                onSubmit={(e: FormEvent): void => {\n                    e.preventDefault();\n                    const form = $(e.target);\n                    const startTime: number =\n                        parseInt(form.find(\"#startMinute\").val() as string) +\n                        (parseInt(form.find(\"#startHour\").val() as string) +\n                            ((form.find(\"#AMPMStart\").val() as string) === \"am\"\n                                ? 0\n                                : 12)) *\n                            60;\n                    const endTime: number =\n                        parseInt(form.find(\"#endMinute\").val() as string) +\n                        (parseInt(form.find(\"#endHour\").val() as string) +\n                            ((form.find(\"#AMPMEnd\").val() as string) === \"am\"\n                                ? 0\n                                : 12)) *\n                            60;\n                    const title: string = form.find(\"#title\").val() as string;\n                    const description: string = form\n                        .find(\"#description\")\n                        .val() as string;\n\n                    const EventData: EventBase = {\n                        title,\n                        description,\n                        startTime,\n                        endTime,\n                    };\n\n                    if (!Array.isArray(Ref.current)) Ref.current = [];\n                    const EventsAtSameStart = Ref.current.find(\n                        (eventsAtOneTime: Event): boolean =>\n                            eventsAtOneTime[0]?.startTime ===\n                            EventData.startTime\n                    );\n                    const indexOfEventsAtSameStart = Ref.current.indexOf(\n                        EventsAtSameStart as Event\n                    );\n                    toggleCreation(false);\n                    setFocus([-1, -1]);\n                    changeEventShowed(\n                        (): defaultArray<number> => DefaultArray<number>(0)\n                    );\n                    if (EventsAtSameStart == null) {\n                        Ref.current = [...Ref.current, [EventData]].sort(\n                            (prevEvents: Event, nextEvents: Event) =>\n                                prevEvents[0]?.startTime -\n                                nextEvents[0]?.endTime\n                        );\n                        return;\n                    }\n\n                    if (\n                        (EventsAtSameStart as Event).find(\n                            event =>\n                                event.title === EventData.title &&\n                                event.description === EventData.description\n                        )\n                    ) {\n                        setMessage({\n                            text: \"two events can't have identicle title and description\",\n                            error: true,\n                        });\n                    }\n\n                    Ref.current[indexOfEventsAtSameStart] = [\n                        ...(EventsAtSameStart as Event),\n                        EventData,\n                    ].sort(\n                        (prevEvent: EventBase, nextEvent: EventBase): number =>\n                            -prevEvent.endTime +\n                            nextEvent.endTime -\n                            nextEvent.startTime +\n                            prevEvent.startTime\n                    );\n                }}\n            >\n                <h2>Create Event</h2>\n                <div>\n                    <label htmlFor='title'>Title</label>\n                    <input\n                        type='text'\n                        name='title'\n                        id='title'\n                        required={true}\n                    />\n                </div>\n                <div>\n                    <label htmlFor='dscription'>Description</label>\n                    <textarea\n                        name='description'\n                        id='description'\n                        cols={60}\n                        rows={20}\n                        required={true}\n                    ></textarea>\n                </div>\n                <label>\n                    Start Time\n                    <input\n                        type='number'\n                        name='startHour'\n                        id='startHour'\n                        className='number'\n                        value={StartHour}\n                        onChange={(e: ChangeEvent<HTMLInputElement>): void => {\n                            setStartHour(parseInt(e.target.value));\n                        }}\n                        max={12}\n                        min={0}\n                        required={true}\n                    />\n                    :\n                    <input\n                        type='number'\n                        name='startMinute'\n                        id='startMinute'\n                        className='number'\n                        value={StartMinute}\n                        onChange={(e: ChangeEvent<HTMLInputElement>): void => {\n                            setStartMinute(parseInt(e.target.value));\n                        }}\n                        max={StartHour === 12 ? 0 : 59}\n                        min={0}\n                        required={true}\n                    />\n                    <select\n                        name='ampmStart'\n                        id='AMPMStart'\n                        value={AMPMStart}\n                        onChange={(e: ChangeEvent<HTMLSelectElement>): void => {\n                            setAMPMStart(e.target.value);\n                            if (e.target.value === \"pm\") setAMPMEnd(\"pm\");\n                        }}\n                        required={true}\n                    >\n                        <option value='am'>am</option>\n                        <option value='pm'>pm</option>\n                    </select>\n                </label>\n                <label>\n                    <br />\n                    End Time\n                    <input\n                        type='number'\n                        name='endHour'\n                        id='endHour'\n                        className='number'\n                        value={EndHour}\n                        onChange={(e: ChangeEvent<HTMLInputElement>): void => {\n                            setEndHour(parseInt(e.target.value));\n                        }}\n                        min={\n                            AMPMEnd === \"am\" || AMPMEnd === AMPMStart\n                                ? StartHour\n                                : 0\n                        }\n                        max={12}\n                        required={true}\n                    />\n                    :\n                    <input\n                        type='number'\n                        name='endMinute'\n                        id='endMinute'\n                        className='number'\n                        value={EndMinute}\n                        onChange={(e: ChangeEvent<HTMLInputElement>): void => {\n                            setEndMinute(parseInt(e.target.value));\n                        }}\n                        min={\n                            (AMPMEnd === \"am\" || AMPMEnd === AMPMStart) &&\n                            EndHour === StartHour\n                                ? StartMinute\n                                : 0\n                        }\n                        max={EndHour === 12 ? 0 : 59}\n                        required={true}\n                    />\n                    <select\n                        name='ampmEnd'\n                        id='AMPMEnd'\n                        value={AMPMEnd}\n                        onChange={(e: ChangeEvent<HTMLSelectElement>): void => {\n                            if (AMPMStart === \"am\")\n                                return setAMPMEnd(e.target.value);\n                            setAMPMEnd(\"pm\");\n                        }}\n                        required={true}\n                    >\n                        <option value='am'>am</option>\n                        <option value='pm'>pm</option>\n                    </select>\n                </label>\n                <div>\n                    <button type='submit'>Create</button>\n                    <button\n                        onClick={(e: MouseEvent<HTMLButtonElement>): void => {\n                            e.preventDefault();\n                            toggleCreation(false);\n                            setFocus([-1, -1]);\n                        }}\n                    >\n                        cancel\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default CreateEvent;\n","import React, { Fragment } from \"react\";\nimport { DefaultArray } from \"./smallFunctions\";\nimport { defaultArray, Event, EventBase, SetState } from \"./types\";\nimport \"./SummaryOfEvents.css\";\n\ninterface SummaryProps {\n    Events: Array<Event> | null;\n    changeEventShowed: SetState<defaultArray<number>>;\n    setFocus: SetState<Array<number>>;\n}\n\nconst SummaryOfEvents = ({\n    Events,\n    changeEventShowed,\n    setFocus,\n}: SummaryProps): JSX.Element => {\n    return (\n        <div id='SummaryOfEvents'>\n            {Events?.map(\n                (Event: Event, index: number): JSX.Element => (\n                    <Fragment key={index}>\n                        {Event.map(\n                            (event: EventBase, Index: number): JSX.Element => {\n                                const StartHour =\n                                    event?.startTime < 60\n                                        ? 0\n                                        : Math.floor(event?.startTime / 60) %\n                                              12 || 12;\n                                const StartMinute = event?.startTime % 60;\n                                const EndHour =\n                                    event?.endTime < 60\n                                        ? 0\n                                        : Math.floor(event?.endTime / 60) %\n                                              12 || 12;\n                                const EndMinute = event?.endTime % 60;\n                                return (\n                                    <button\n                                        className='SummarisedEvents'\n                                        key={Index}\n                                        onClick={(): void => {\n                                            changeEventShowed(\n                                                (\n                                                    EventShowed: defaultArray<number>\n                                                ): defaultArray<number> =>\n                                                    DefaultArray<number>(\n                                                        0,\n                                                        EventShowed(\n                                                            index,\n                                                            Index\n                                                        )\n                                                    )\n                                            );\n                                            setFocus([index, Index]);\n                                        }}\n                                    >\n                                        <h3>{event?.title}</h3>\n                                        <p>\n                                            From {StartHour}:{StartMinute}{\" \"}\n                                            {event?.startTime <= 12 * 60\n                                                ? \"am\"\n                                                : \"pm\"}{\" \"}\n                                            to {EndHour}:{EndMinute}{\" \"}\n                                            {event?.endTime <= 12 * 60\n                                                ? \"am\"\n                                                : \"pm\"}\n                                        </p>\n                                    </button>\n                                );\n                            }\n                        )}\n                    </Fragment>\n                )\n            )}\n        </div>\n    );\n};\n\nexport default SummaryOfEvents;\n","import { post } from \"jquery\";\nimport React from \"react\";\nimport \"./header.css\";\nimport { AllEvents, SetState } from \"./types\";\n\nconst header = ({\n    setSignIn,\n    setUser,\n    user,\n    allEvents,\n    setMessage,\n}: {\n    setSignIn: SetState<boolean>;\n    user: string;\n    setUser: SetState<string>;\n    allEvents: AllEvents;\n    setMessage: SetState<{\n        text: string;\n        error?: boolean;\n    }>;\n}): JSX.Element => {\n    return (\n        <header>\n            <button\n                onClick={(): void => {\n                    if (user === \"unonymous\") {\n                        setSignIn(true);\n                        return;\n                    }\n                    post(\n                        \"/calendar/users/qsave\",\n                        {\n                            user,\n                            ...allEvents,\n                        },\n                        (): void => {\n                            setMessage({ text: \"saved\" });\n                        }\n                    ).fail((): void => {\n                        setMessage({\n                            text: \"save failed\",\n                            error: true,\n                        });\n                    });\n                }}\n            >\n                Save\n            </button>\n            {user !== \"unonymous\" && (\n                <button\n                    onClick={(): void => {\n                        setUser(\"unonymous\");\n                    }}\n                >\n                    Sign out\n                </button>\n            )}\n        </header>\n    );\n};\n\nexport default header;\n","import React, { FormEvent, MouseEvent, useRef } from \"react\";\nimport $, { get } from \"jquery\";\nimport { SetState, State } from \"./types\";\nimport UseState from \"./UseState\";\nimport \"./SignIn.css\";\n\nconst SignIn = ({\n    setUser,\n    setSignIn,\n}: {\n    setUser: SetState<string>;\n    setSignIn: SetState<boolean>;\n}): JSX.Element => {\n    const errorRef = useRef(false);\n    const serverFault = useRef(false);\n    const invalidPassRef = useRef(false);\n    const [haveAcount, setHaveAcount]: State<boolean> = UseState<boolean>(true);\n    return (\n        <div id='sign-in-container' onClick={(): void => setSignIn(false)}>\n            <div\n                id='sign-in'\n                onClick={(e: MouseEvent<HTMLDivElement>): void => {\n                    e.stopPropagation();\n                }}\n            >\n                <h2>{haveAcount ? \"Sign In\" : \"Sign Up\"}</h2>\n                <form\n                    id='sign-in-form'\n                    onSubmit={(e: FormEvent<HTMLFormElement>): void => {\n                        e.preventDefault();\n                    }}\n                >\n                    <div>\n                        <label htmlFor='name'>name</label>\n                        <input\n                            id='name'\n                            onChange={(\n                                e: FormEvent<HTMLInputElement>\n                            ): void => {\n                                serverFault.current = false;\n                                errorRef.current = false;\n                                $(\"#name\").attr({\n                                    pattern: \"^\\\\w*$\",\n                                });\n                                (\n                                    $(\"#name\")[0] as HTMLInputElement\n                                ).setCustomValidity(\"\");\n                            }}\n                            onInvalid={(\n                                e: FormEvent<HTMLInputElement>\n                            ): void => {\n                                const target = $(\n                                    \"#name\"\n                                )[0] as HTMLInputElement;\n\n                                if (!serverFault.current && !errorRef.current)\n                                    target.setCustomValidity(\n                                        \"name must be filled and have alpha numeric\"\n                                    );\n                            }}\n                            type='text'\n                            required={true}\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor='password'>password</label>\n                        <input\n                            id='password'\n                            type='password'\n                            pattern='^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,}$'\n                            required={true}\n                            onChange={(): void => {\n                                invalidPassRef.current = false;\n                                $(\"#password\").attr(\n                                    \"pattern\",\n                                    \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{8,}$\"\n                                );\n                                (\n                                    $(\"#password\")[0] as HTMLInputElement\n                                ).setCustomValidity(\"\");\n                            }}\n                            onInvalid={(\n                                e: FormEvent<HTMLInputElement>\n                            ): void => {\n                                if (invalidPassRef.current) return;\n                                const target = $(\n                                    \"#password\"\n                                )[0] as HTMLInputElement;\n                                const value = $(\"#password\").val() as string;\n                                if (value?.length < 8) {\n                                    target.setCustomValidity(\n                                        \"must have atleast 8 characters\"\n                                    );\n                                    return;\n                                }\n                                if (!/^(?=.*[a-z])/u.test(value)) {\n                                    target.setCustomValidity(\n                                        \"must contsin lowercase characters\"\n                                    );\n                                    return;\n                                }\n                                if (!/^(?=.*[A-Z])/u.test(value)) {\n                                    target.setCustomValidity(\n                                        \"must contain uppercase alphabet\"\n                                    );\n                                    return;\n                                }\n                                if (!/^(?=.*[0-9])/u.test(value)) {\n                                    target.setCustomValidity(\n                                        \"must contain numbers\"\n                                    );\n                                    return;\n                                }\n                                if (!/^(?=.*[!@#$%^&*_=+-])/u.test(value)) {\n                                    target.setCustomValidity(\n                                        \"must contain special characters\"\n                                    );\n                                    return;\n                                }\n                                target.setCustomValidity(\"\");\n                            }}\n                        />\n                    </div>\n                    <input\n                        type='submit'\n                        onClick={async (e: MouseEvent<HTMLInputElement>) => {\n                            if (\n                                !(\n                                    (\n                                        $(\"#name\")[0] as HTMLInputElement\n                                    ).checkValidity() &&\n                                    (\n                                        $(\"#password\")[0] as HTMLInputElement\n                                    ).checkValidity()\n                                )\n                            )\n                                return;\n                            try {\n                                const o = await get(\n                                    \"/calendar/sign-in-up\",\n                                    {\n                                        name: $(\"#name\").val(),\n                                        password: $(\"#password\").val(),\n                                        haveAcount,\n                                    },\n                                    data => {\n                                        console.log(data);\n                                    },\n                                    \"json\"\n                                ).promise();\n                                if (!o?.isValid && !o?.name) {\n                                    errorRef.current = true;\n                                    $(\"#name\").attr(\"pattern\", \"\");\n                                    (\n                                        $(\"#name\")[0] as HTMLInputElement\n                                    ).setCustomValidity(\n                                        `name ${\n                                            haveAcount\n                                                ? \"doesn't exists\"\n                                                : \"exists\"\n                                        }`\n                                    );\n                                    e.preventDefault();\n                                    return;\n                                }\n                                if (!o?.isValidPassword) {\n                                    invalidPassRef.current = true;\n                                    $(\"#password\").attr(\"pattern\", \"\");\n                                    (\n                                        $(\"#password\")[0] as HTMLInputElement\n                                    ).setCustomValidity(\"wrong password\");\n                                    e.preventDefault();\n                                    return;\n                                }\n                                setUser(o?.name);\n                                setSignIn(false);\n                            } catch (err) {\n                                $(\"#name\").attr({\n                                    pattern: \"\",\n                                });\n                                (\n                                    $(\"#name\")[0] as HTMLInputElement\n                                ).setCustomValidity(\"server error\");\n                                e.preventDefault();\n                                serverFault.current = true;\n                                return;\n                            }\n                        }}\n                        value={haveAcount ? \"log in\" : \"create account\"}\n                    />\n                </form>\n                {haveAcount ? (\n                    <p>\n                        Don&rsquo;t have account?{\" \"}\n                        <button\n                            className='change-method'\n                            onClick={(): void => setHaveAcount(false)}\n                        >\n                            sign up\n                        </button>\n                    </p>\n                ) : (\n                    <p>\n                        Have account?{\" \"}\n                        <button\n                            className='change-method'\n                            onClick={(): void => setHaveAcount(true)}\n                        >\n                            sign in\n                        </button>\n                    </p>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default SignIn;\n","import React, { useEffect, useRef } from \"react\";\nimport $ from \"jquery\";\nimport { SetState } from \"./types\";\n\nconst Message = ({\n    message: { text, error },\n    setMessage,\n}: {\n    message: {\n        text: string;\n        error?: boolean;\n    };\n    setMessage: SetState<{\n        text: string;\n        error?: boolean;\n    }>;\n}): JSX.Element => {\n    const pRef = useRef<HTMLParagraphElement>(null);\n    useEffect((): void => {\n        if (pRef.current == null || !text) return;\n        const p = $(pRef.current as HTMLParagraphElement);\n        p.css(\"transform\", \"translate(50%, -4em)\");\n        setTimeout((): void => {\n            p.css(\"transform\", \"translate(50%)\");\n            setTimeout((): void => {\n                p.css(\"transform\", \"translate(50%, -4em)\");\n                setTimeout((): void => {\n                    setMessage({\n                        text: \"\",\n                        error: false,\n                    });\n                }, 1000);\n            }, 4000);\n        }, 100);\n    }, [pRef, text, setMessage]);\n    return (\n        <p\n            id='message'\n            style={{\n                transform: \"translate(50%, -4em)\",\n                position: \"fixed\",\n                top: \"0.1em\",\n                right: \"50%\",\n                transition: \"transform 500ms ease-in-out\",\n                backgroundColor: error ? \"red\" : \"var(--fn-colour-m)\",\n                border: \"0.1em solid var(--bg-colour-t)\",\n                color: \"var(--bg-colour-m)\",\n                zIndex: 100000,\n                padding: \"0 1em\",\n                borderRadius: \"1em\",\n                fontSize: \"1.2rem\",\n            }}\n            ref={pRef}\n        >\n            {text}\n        </p>\n    );\n};\n\nexport default Message;\n","import React, { useRef } from \"react\";\nimport { get } from \"jquery\";\nimport useState from \"./UseState\";\nimport \"./App.css\";\nimport Calendar from \"./calendar\";\nimport { DefaultArray, getDaysInMonth } from \"./smallFunctions\";\nimport { State, Event, defaultArray, AllEvents } from \"./types\";\nimport Events from \"./Event\";\nimport CreateEvent from \"./CreateEvent\";\nimport SummaryOfEvents from \"./SummaryOfEvents\";\nimport Header from \"./header\";\nimport SignIn from \"./SignIn\";\nimport Message from \"./message\";\n\nfunction App(): JSX.Element {\n    const [message, setMessage]: State<{\n        text: string;\n        error?: boolean;\n    }> = useState<{\n        text: string;\n        error?: boolean;\n    }>({\n        text: \"\",\n        error: false,\n    });\n    const [year, setYear]: State<number> = useState<number>(\n        new Date().getFullYear()\n    );\n    const [isSigningIn, setSignIn]: State<boolean> = useState<boolean>(false);\n    const [month, setMonth]: State<number> = useState<number>(\n        new Date().getMonth()\n    );\n    const [selectedDate, setDate]: State<number> = useState<number>(\n        new Date().getDate()\n    );\n\n    if (getDaysInMonth(month, year) < selectedDate)\n        setDate(getDaysInMonth(month, year));\n\n    const [ShowedEvents, setShowedEvents]: State<defaultArray<number>> =\n        useState<defaultArray<number>>(() => DefaultArray<number>(0));\n    const [FocusedEvent, setFocused]: State<Array<number>> = useState<\n        Array<number>\n    >([-1, -1]);\n\n    const [user, setUser]: State<string> = useState<string>(\n        ((): string => {\n            let String = \"deafault-user\";\n            get(\"/calendar/user\", (data: string): void => {\n                String = data;\n                setUser(String);\n            });\n            return String;\n        })()\n    );\n\n    const EventsRef = useRef<Array<Event> | null>(null);\n\n    const events = EventsRef.current;\n\n    const [allEvents, setAllEvents]: State<AllEvents> = useState<AllEvents>({});\n\n    const [isCreatingEvent, toggleCreation]: State<boolean> =\n        useState<boolean>(false);\n\n    const createEvent = (): void => toggleCreation(true);\n\n    const dateStartAt = new Date(year, month, 1).getDay();\n\n    return (\n        <div id='App'>\n            <Message message={message} setMessage={setMessage} />\n            <Header\n                setSignIn={setSignIn}\n                user={user}\n                setUser={setUser}\n                allEvents={allEvents}\n                setMessage={setMessage}\n            />\n            <Calendar\n                year={year}\n                month={month}\n                dateRange={getDaysInMonth(month, year)}\n                lastDateRange={getDaysInMonth(\n                    month === 0 ? 11 : month - 1,\n                    month === 0 ? year - 1 : year\n                )}\n                dateStartAt={dateStartAt}\n                selectedDate={selectedDate}\n                setDate={setDate}\n                setMonth={setMonth}\n                setYear={setYear}\n                setFocused={setFocused}\n            />\n            <Events\n                year={year}\n                month={month}\n                date={selectedDate}\n                user={user}\n                Ref={EventsRef}\n                CreateEvent={createEvent}\n                ShowEvents={ShowedEvents}\n                allEvents={allEvents}\n                setAllEvents={setAllEvents}\n                setFocused={setFocused}\n                Focused={FocusedEvent}\n            />\n            <SummaryOfEvents\n                Events={events}\n                changeEventShowed={setShowedEvents}\n                setFocus={setFocused}\n            />\n            {isCreatingEvent && (\n                <CreateEvent\n                    Ref={EventsRef}\n                    toggleCreation={toggleCreation}\n                    changeEventShowed={setShowedEvents}\n                    setFocus={setFocused}\n                    setMessage={setMessage}\n                />\n            )}\n            {isSigningIn && <SignIn setUser={setUser} setSignIn={setSignIn} />}\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}